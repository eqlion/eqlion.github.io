{"version":3,"sources":["src/components/LanguageSwitch.tsx","src/components/Screen.tsx","src/components/Text.tsx","src/components/Title.tsx","src/components/Link.tsx","src/components/About/About.tsx","src/util/index.tsx","src/components/About/index.tsx","src/components/UnderlinedText.tsx","src/components/DateInfo.tsx","src/components/Education/Itmo.tsx","src/components/Education/EducationText.tsx","src/components/Education/index.tsx","src/components/BulletListItem.tsx","src/components/Experience/Sixhands.tsx","src/components/Experience/ExperienceText.tsx","src/components/Experience/index.tsx","src/components/Container.tsx","src/components/Stack/ConfigExamples.tsx","src/components/Stack/ExtraKnowledge.tsx","src/components/Stack/StackText.tsx","src/components/Stack/index.tsx","src/components/Contacts/ContactsText.tsx","src/components/Contacts/index.tsx","App.tsx","src/util/language.ts","src/util/colors.ts","src/hooks/useFont.ts","src/hooks/useIsPhone.ts"],"names":["LanguageSwitch","useContext","LanguageContext","language","changeLanguage","node","useSharedValue","useEffect","value","withTiming","fontSize","useFont","width","style","useAnimatedStyle","left","interpolate","enStyle","color","interpolateColor","COLORS","background","white","ruStyle","onPress","height","styles","container","View","highlight","Text","flag","StyleSheet","create","flexDirection","justifyContent","alignItems","backgroundColor","borderRadius","position","zIndex","textAlign","textAlignVertical","flex","fontFamily","Screen","children","paddingHorizontal","useIsPhone","paddingTop","regular","bold","light","medium","type","text","Title","Link","url","props","useState","hovered","setHovered","textDecorationLine","purple","Pressable","Linking","openURL","onHoverIn","onHoverOut","whiteSpace","TEXT","en","Date","getTime","getFullYear","ru","n","formatAge","AboutText","TITLE","About","titleContainer","marginBottom","UnderlinedText","underline","Comma","DateInfo","dateStart","dateEnd","place","stack","line","green","peachy","notes","fontStyle","marginLeft","marginTop","EDUCATION","THESIS","LINK","Itmo","EducationText","Education","Bullet","size","bullet","BulletListItem","marginRight","ABSTRACT","FEATURES","urls","Sixhands","map","index","key","urlIndex","last","parts","split","name","length","parseUrl","ExperienceText","Experience","Container","DESCRIPTION","ConfigExamples","SKILLS","ExtraKnowledge","skill","TECH","TECH_TITLE","INSTRUMENTS_TITLE","INSTRUMENTS","OTHER","StackText","isPhone","containerStyle","columnStyle","column","tagContainer","tech","tag","instrument","anotherTag","flexWrap","textDecorationColor","blue","orange","Stack","ContactsText","getLinks","flexBasis","Contacts","App","setLanguage","useFonts","FiraCode_300Light","FiraCode_700Bold","FiraCode_400Regular","FiraCode_500Medium","Provider","lang","Helmet","content","createContext","gray","red","w","useWindowDimensions","PixelRatio","roundToNearestPixel"],"mappings":"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","file":"static/js/app.a46a4da2.chunk.js","sourcesContent":["import React, { FC, useContext, useEffect } from \"react\";\nimport { Pressable, StyleSheet } from \"react-native\";\nimport Animated, {\n    useSharedValue,\n    useAnimatedStyle,\n    withTiming,\n    interpolate,\n    interpolateColor,\n} from \"react-native-reanimated\";\nimport Text from \"./Text\";\n\nimport { LanguageContext } from \"../util/language\";\nimport useFont from \"../hooks/useFont\";\nimport { COLORS } from \"../util/colors\";\n\n// const AnimatedText = Animated.createAnimatedComponent(Text);\n\nconst LanguageSwitch: FC = () => {\n    const { language, changeLanguage } = useContext(LanguageContext);\n    const node = useSharedValue(language === \"en\" ? 0 : 1);\n\n    useEffect(() => {\n        node.value = withTiming(language === \"en\" ? 0 : 1);\n    }, [language]);\n\n    const fontSize = useFont(13);\n\n    const width = useFont(22) * 1.3;\n\n    const style = useAnimatedStyle(() => ({\n        left: interpolate(node.value, [0, 1], [0, width]),\n    }));\n\n    const enStyle = useAnimatedStyle(() => ({\n        color: interpolateColor(\n            node.value,\n            [0, 1],\n            [COLORS.background, COLORS.white],\n        ),\n    }));\n\n    const ruStyle = useAnimatedStyle(() => ({\n        color: interpolateColor(\n            node.value,\n            [0, 1],\n            [COLORS.white, COLORS.background],\n        ),\n    }));\n\n    return (\n        <Pressable\n            onPress={changeLanguage}\n            style={[\n                {\n                    width: width * 2,\n                    height: width,\n                },\n                styles.container,\n            ]}>\n            <Animated.View\n                style={[styles.highlight, { width, height: width }, style]}\n            />\n            <Animated.Text style={[{ width, fontSize }, styles.flag, enStyle]}>\n                EN\n            </Animated.Text>\n            <Animated.Text style={[{ width, fontSize }, styles.flag, ruStyle]}>\n                RU\n            </Animated.Text>\n        </Pressable>\n    );\n};\n\nexport default LanguageSwitch;\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n    },\n    highlight: {\n        backgroundColor: \"#ffffff90\",\n        borderRadius: 10000,\n        position: \"absolute\",\n        zIndex: -10,\n    },\n    flag: {\n        textAlign: \"center\",\n        textAlignVertical: \"center\",\n        flex: 1,\n        fontFamily: \"FiraCode_400Regular\",\n    },\n});\n","import React, { FC } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport useIsPhone from \"../hooks/useIsPhone\";\nimport { COLORS } from \"../util/colors\";\n\nconst Screen: FC = ({ children }) => {\n    const isPhone = useIsPhone();\n    const style = {\n        paddingHorizontal: isPhone ? 16 : \"27%\",\n    };\n    return <View style={[styles.container, style]}>{children}</View>;\n};\n\nexport default Screen;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: COLORS.background,\n        paddingTop: 32,\n    },\n});\n","import React, { FC } from \"react\";\nimport { StyleSheet, Text as DefaultText, TextProps } from \"react-native\";\nimport useFont from \"../hooks/useFont\";\nimport { COLORS } from \"../util/colors\";\n\nexport type FontWeight = \"bold\" | \"light\" | \"regular\" | \"medium\";\n\ninterface IProps extends TextProps {\n    type?: FontWeight;\n}\n\nconst fontFamily = {\n    regular: \"FiraCode_400Regular\",\n    bold: \"FiraCode_700Bold\",\n    light: \"FiraCode_300Light\",\n    medium: \"FiraCode_500Medium\",\n};\n\nconst Text: FC<IProps> = ({ style, type = \"regular\", children }) => {\n    const fontSize = useFont(13);\n    return (\n        <DefaultText\n            style={[\n                { fontFamily: fontFamily[type], fontSize },\n                styles.text,\n                style,\n            ]}>\n            {children}\n        </DefaultText>\n    );\n};\n\nexport default Text;\n\nconst styles = StyleSheet.create({\n    text: {\n        color: COLORS.white,\n    },\n});\n","import React, { FC } from \"react\";\nimport { View, StyleSheet, TextStyle, StyleProp } from \"react-native\";\nimport useFont from \"../hooks/useFont\";\nimport Text from \"./Text\";\n\ninterface IProps {\n    style?: StyleProp<TextStyle>;\n}\n\nconst Title: FC<IProps> = ({ children, style }) => {\n    const fontSize = useFont(22);\n    return (\n        <View>\n            <Text type=\"bold\" style={[style, { fontSize }]}>\n                {children}\n            </Text>\n        </View>\n    );\n};\n\nexport default Title;\n\nconst styles = StyleSheet.create({});\n","import React, { useState, FC } from \"react\";\nimport { Pressable, Linking, TextProps, StyleSheet } from \"react-native\";\nimport { COLORS } from \"../util/colors\";\n\nimport Text from \"./Text\";\n\ninterface IProps extends TextProps {\n    url: string;\n}\n\nconst Link: FC<IProps> = ({ url, children, ...props }) => {\n    const [hovered, setHovered] = useState(false);\n    const style = {\n        textDecorationLine: hovered\n            ? (\"underline\" as const)\n            : (\"none\" as const),\n        color: COLORS.purple,\n    };\n    return (\n        <Pressable\n            onPress={() => Linking.openURL(url)}\n            onHoverIn={() => setHovered(true)}\n            onHoverOut={() => setHovered(false)}>\n            <Text style={[style, styles.text]} {...props}>\n                {children}\n            </Text>\n        </Pressable>\n    );\n};\n\nexport default Link;\n\nconst styles = StyleSheet.create({\n    text: {\n        whiteSpace: \"nowrap\",\n    },\n});\n","import React, { FC, useContext } from \"react\";\nimport { formatAge } from \"../../util\";\nimport { LanguageContext } from \"../../util/language\";\nimport Text from \"../Text\";\n\nconst TEXT = {\n    en: `Hey! I'm Nikolay Lapa, ${\n        new Date(\n            new Date().getTime() - new Date(\"1999-08-05\").getTime(),\n        ).getFullYear() - 1970\n    }, and i'm a Middle React Native developer, which means that I love and know how to create exciting and fast crossplatform mobile apps (and rarely sites too: this site's been created entirely using nothing but React Native!). Below you can find info about my skills, experience, stack and education, and if you want to work with me (or me to work with you), feel free to message me!`,\n    ru: `Привет! Меня зовут Николай Лапа, мне ${formatAge(\n        new Date(\n            new Date().getTime() - new Date(\"1999-08-05\").getTime(),\n        ).getFullYear() - 1970,\n    )} и я Миддл Реакт Нейтив разработчик — люблю и умею делать крутые и быстрые кросплатформенные мобильные приложения (и очень редко сайты: сайт на котором Вы находитесь полностью написан на Реакт Нейтиве!). Чуть ниже перечислены мои скиллы, опыт, стек, образование, и если Вы бы хотели поработать со мной (или чтобы я поработал с Вами) — пишите!`,\n};\n\nconst AboutText: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return <Text>{TEXT[language]}</Text>;\n};\n\nexport default AboutText;\n","import React from \"react\";\nimport Link from \"../components/Link\";\nimport Text from \"../components/Text\";\n\nexport const parseUrl = (url: string, index: number, last: boolean) => {\n    const parts = url.split(\"/\");\n    const nameWithVersion = parts[parts.length - 1];\n    const name = nameWithVersion.split(\".\")[0];\n    return (\n        <Text key={index}>\n            <Link url={url}>{name}</Link>\n            {!last && \", \"}\n        </Text>\n    );\n};\n\nexport const formatAge = (n: number) => {\n    if (n >= 11 && n <= 20) {\n        return `${n} лет`;\n    }\n    switch (n % 10) {\n        case 1:\n            return `${n} год`;\n        case 2:\n        case 3:\n        case 4:\n            return `${n} года`;\n        default:\n            return `${n} лет`;\n    }\n};\n","import React, { useState, FC, useEffect, useContext } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { LanguageContext } from \"../../util/language\";\nimport LanguageSwitch from \"../LanguageSwitch\";\nimport Title from \"../Title\";\nimport AboutText from \"./About\";\n\nconst TITLE = {\n    en: \"About\",\n    ru: \"Про меня\",\n};\n\nconst About: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return (\n        <View style={styles.container}>\n            <View style={styles.titleContainer}>\n                <Title>{TITLE[language]}</Title>\n                <LanguageSwitch />\n            </View>\n            <AboutText />\n        </View>\n    );\n};\n\nexport default About;\n\nconst styles = StyleSheet.create({\n    container: {\n        marginBottom: 32,\n    },\n    titleContainer: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n    },\n});\n","import React, { useState, FC, useEffect } from \"react\";\nimport {\n    View,\n    TouchableOpacity,\n    StyleSheet,\n    TextStyle,\n    TextProps,\n} from \"react-native\";\nimport Text, { FontWeight } from \"./Text\";\n\ninterface IProps extends TextProps {\n    color: string;\n    type?: FontWeight;\n    style?: TextStyle;\n}\n\nconst UnderlinedText: FC<IProps> = ({\n    color,\n    children,\n    type,\n    style,\n    ...props\n}) => {\n    const background = { backgroundColor: color };\n    return (\n        <View>\n            <Text type={type} style={style} {...props}>\n                {children}\n            </Text>\n            <View style={[background, styles.underline]} />\n        </View>\n    );\n};\n\nexport default UnderlinedText;\n\nconst styles = StyleSheet.create({\n    underline: {\n        width: \"100%\",\n        height: 2,\n    },\n});\n","import React, { FC } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { COLORS } from \"../util/colors\";\n\nimport Text from \"./Text\";\nimport UnderlinedText from \"./UnderlinedText\";\n\ninterface IProps {\n    dateStart: string;\n    dateEnd?: string;\n    place: string;\n    position: string;\n    stack?: string;\n}\n\nconst Comma = () => <Text>, </Text>;\n\nconst DateInfo: FC<IProps> = ({\n    dateStart,\n    dateEnd,\n    place,\n    position,\n    stack,\n    children,\n}) => (\n    <View style={styles.container}>\n        <View style={styles.line}>\n            <Text>\n                {`(${dateStart}–${dateEnd ? dateEnd : \"...\"}) `}\n                <UnderlinedText color={COLORS.green} style={styles.place}>\n                    {place}\n                </UnderlinedText>\n                <Comma />\n            </Text>\n        </View>\n        <View style={styles.line}>\n            <Text>\n                {!!stack && (\n                    <>\n                        <Text>{stack}</Text>\n                        <Comma />\n                    </>\n                )}\n                <UnderlinedText color={COLORS.peachy} type=\"bold\">\n                    {position}\n                </UnderlinedText>\n            </Text>\n        </View>\n        <View style={styles.notes}>{children}</View>\n    </View>\n);\n\nexport default DateInfo;\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"100%\",\n        marginBottom: 20,\n    },\n    line: { flexDirection: \"row\" },\n    place: {\n        fontStyle: \"italic\",\n    },\n    notes: {\n        width: \"95%\",\n        marginLeft: \"5%\",\n        marginTop: 10,\n    },\n});\n","import React, { FC, useContext } from \"react\";\n\nimport DateInfo from \"../DateInfo\";\nimport Link from \"../Link\";\nimport Text from \"../Text\";\n\nimport { LanguageContext } from \"../../util/language\";\n\nconst EDUCATION = {\n    ru: {\n        dateEnd: \"2021\",\n        dateStart: \"2017\",\n        position: \"Бакалавр\",\n        place: \"Университет ИТМО\",\n        stack: \"Лазеры в инфо-коммуникационных системах\",\n    },\n    en: {\n        dateEnd: \"2021\",\n        dateStart: \"2017\",\n        position: \"Bachelor\",\n        place: \"ITMO University\",\n        stack: \"Lasers in info-communicational systems\",\n    },\n};\n\nconst THESIS = {\n    ru: \": Разработка фотоприемной части восходящего канала связи по технологии Li-Fi. Для написания использовался LaTeX и Python для графиков и вычислений.\",\n    en: \": Development of the receiving part of the uplink communication channel using Li-Fi technology. Used LaTeX for writing and Python for plotting and calculations.\",\n};\n\nconst LINK = {\n    ru: \"ВКР\",\n    en: \"Thesis (in Russian)\",\n};\n\nconst Itmo: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return (\n        <DateInfo {...EDUCATION[language]}>\n            <Text>\n                <Link url=\"https://github.com/eqlion/bachelor-diploma\">\n                    {LINK[language]}\n                </Link>\n                {THESIS[language]}\n            </Text>\n        </DateInfo>\n    );\n};\n\nexport default Itmo;\n","import React, { FC } from \"react\";\nimport { View } from \"react-native\";\n\nimport Itmo from \"./Itmo\";\n\nconst EducationText: FC = () => {\n    return (\n        <View>\n            <Itmo />\n        </View>\n    );\n};\n\nexport default EducationText;\n","import React, { FC, useContext } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { LanguageContext } from \"../../util/language\";\nimport Title from \"../Title\";\nimport EducationText from \"./EducationText\";\n\nconst TITLE = {\n    ru: \"Образование\",\n    en: \"Educations\",\n};\n\nconst Education: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return (\n        <View style={styles.container}>\n            <Title>{TITLE[language]}</Title>\n            <EducationText />\n        </View>\n    );\n};\n\nexport default Education;\n\nconst styles = StyleSheet.create({\n    container: {\n        marginBottom: 32,\n    },\n});\n","import React, { useState, FC, useEffect } from \"react\";\nimport { View, Text, TouchableOpacity, StyleSheet } from \"react-native\";\nimport useFont from \"../hooks/useFont\";\nimport { COLORS } from \"../util/colors\";\n\nconst Bullet = () => {\n    const size = useFont(5);\n    return (\n        <View\n            style={[\n                styles.bullet,\n                { marginTop: size + 1, width: size, height: size },\n            ]}\n        />\n    );\n};\n\nconst BulletListItem: FC = ({ children }) => {\n    return (\n        <View style={styles.container}>\n            <Bullet />\n            {children}\n        </View>\n    );\n};\n\nexport default BulletListItem;\n\nconst styles = StyleSheet.create({\n    bullet: {\n        // width: 7,\n        // height: 7,\n        borderRadius: 1000,\n        backgroundColor: COLORS.white,\n        marginRight: 10,\n    },\n    container: {\n        flexDirection: \"row\",\n        width: \"100%\",\n    },\n});\n","import React, { FC, useContext } from \"react\";\nimport { StyleSheet } from \"react-native\";\n\nimport DateInfo from \"../DateInfo\";\nimport Text from \"../Text\";\nimport BulletListItem from \"../BulletListItem\";\n\nimport { LanguageContext } from \"../../util/language\";\nimport { parseUrl } from \"../../util\";\n\nconst ABSTRACT = {\n    ru: \"Занимаюсь полным циклом разработки приложения: вёрстка, бизнес-логика, сборка и подпись, отправка на тестирование (TestFlight), загрузка в магазины (AppStore, Google Play Store). Некоторые из вещей, с которыми я работал:\",\n    en: \"I do the whole development cycle: layout, business-logic, building and signing, sending to tests (TestFlight), uploading to the store (AppStore, Google Play Store). Some of the things I've worked on:\",\n};\n\nconst FEATURES = {\n    ru: [\n        {\n            text: \"BlueTooth LE — подключение к аксессуарам по BT, чтение, запись, подписка на нотификации\",\n            urls: [\"https://github.com/Polidea/react-native-ble-plx\"],\n        },\n        {\n            text: \"Локальные и удалённые пуш уведомления — Firebase Cloud Messaging\",\n            urls: [\n                \"https://github.com/notifee/react-native-notifee\",\n                \"https://github.com/invertase/react-native-firebase\",\n            ],\n        },\n        {\n            text: \"Проектирование и использование Firebase Cloud Firestore, Cloud Storage, Dynamic Links для приложений без бэкенда\",\n            urls: [\"https://github.com/invertase/react-native-firebase\"],\n        },\n        {\n            text: \"Распознавание лица, 2D маски\",\n            urls: [\n                \"https://github.com/react-native-camera/react-native-camera\",\n            ],\n        },\n        {\n            text: \"Карты (Google, Yandex), кластеризация, создание и редактирование маркеров, полигонов, ломаных\",\n            urls: [\n                \"https://github.com/react-native-maps/react-native-maps\",\n                \"https://github.com/volga-volga/react-native-yamap\",\n            ],\n        },\n        {\n            text: \"Проведение платежей через CloudPayments, YooKassa; IAP\",\n            urls: [\n                \"https://github.com/VertaZoom/react-native-cloudpayments.git#1.1.0\",\n                \"https://github.com/lamantin-group/react-native-yandex-payment\",\n                \"https://github.com/dooboolab/react-native-iap\",\n            ],\n        },\n        {\n            text: \"Производительные (60+ FPS) анимации элементов\",\n            urls: [\n                \"https://github.com/https://github.com/software-mansion/react-native-reanimated\",\n            ],\n        },\n    ],\n    en: [\n        {\n            text: \"BlueTooth LE — connecting to accessories via BT, read, write, subscribe to notifications\",\n            urls: [\"https://github.com/Polidea/react-native-ble-plx\"],\n        },\n        {\n            text: \"Local and remote push notifications — Firebase Cloud Messaging\",\n            urls: [\n                \"https://github.com/notifee/react-native-notifee\",\n                \"https://github.com/invertase/react-native-firebase\",\n            ],\n        },\n        {\n            text: \"Designing and using Firebase Cloud Firestore, Cloud Storage, Dynamic Links for the apps without backend\",\n            urls: [\"https://github.com/invertase/react-native-firebase\"],\n        },\n        {\n            text: \"Face recognition, 2D face effects\",\n            urls: [\n                \"https://github.com/react-native-camera/react-native-camera\",\n            ],\n        },\n        {\n            text: \"Maps (Google, Yandex), clustering, creating and editing markers, polygons and lines\",\n            urls: [\n                \"https://github.com/react-native-maps/react-native-maps\",\n                \"https://github.com/volga-volga/react-native-yamap\",\n            ],\n        },\n        {\n            text: \"Accepting payments via CloudPayments, YooKassa; IAP\",\n            urls: [\n                \"https://github.com/VertaZoom/react-native-cloudpayments.git#1.1.0\",\n                \"https://github.com/lamantin-group/react-native-yandex-payment\",\n                \"https://github.com/dooboolab/react-native-iap\",\n            ],\n        },\n        {\n            text: \"Smooth (60+ FPS) element animations\",\n            urls: [\n                \"https://github.com/https://github.com/software-mansion/react-native-reanimated\",\n            ],\n        },\n    ],\n};\n\nconst Sixhands: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return (\n        <DateInfo\n            place=\"Sixhands\"\n            position=\"Junior/Middle React Native dev\"\n            dateStart=\"07, 2020\">\n            <>\n                <Text>{ABSTRACT[language]}</Text>\n                {FEATURES[language].map(({ text, urls }, index) => (\n                    <BulletListItem key={index}>\n                        <Text>\n                            {text} (\n                            {urls.map((url, urlIndex) =>\n                                parseUrl(\n                                    url,\n                                    urlIndex,\n                                    urls.length - 1 === urlIndex,\n                                ),\n                            )}\n                            )\n                        </Text>\n                    </BulletListItem>\n                ))}\n            </>\n        </DateInfo>\n    );\n};\n\nexport default Sixhands;\n\nconst styles = StyleSheet.create({});\n","import React, { FC } from \"react\";\nimport { View } from \"react-native\";\nimport Sixhands from \"./Sixhands\";\n\nconst ExperienceText: FC = () => {\n    return (\n        <View>\n            <Sixhands />\n        </View>\n    );\n};\n\nexport default ExperienceText;\n","import React, { FC, useContext } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { LanguageContext } from \"../../util/language\";\n\nimport Title from \"../Title\";\nimport ExperienceText from \"./ExperienceText\";\n\nconst TITLE = {\n    ru: \"Опыт\",\n    en: \"Experience\",\n};\n\nconst Experience: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return (\n        <View style={styles.container}>\n            <Title>{TITLE[language]}</Title>\n            <ExperienceText />\n        </View>\n    );\n};\n\nexport default Experience;\n\nconst styles = StyleSheet.create({\n    container: {\n        marginBottom: 32,\n    },\n});\n","import React, { FC } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nconst Container: FC = ({ children }) => (\n    <View style={styles.container}>{children}</View>\n);\n\nexport default Container;\n\nconst styles = StyleSheet.create({\n    container: {\n        marginBottom: 16,\n    },\n});\n","import React, { FC, useContext } from \"react\";\n\nimport Text from \"../Text\";\nimport Link from \"../Link\";\nimport Container from \"../Container\";\n\nimport { LanguageContext } from \"../../util/language\";\n\nconst ESLINT =\n    \"https://gist.github.com/eqlion/c45a76d33e219b635c491d207d670603\";\n\nconst PRETTIER =\n    \"https://gist.github.com/eqlion/e6c48a1002d5c887d160eb92dfff6edb\";\n\nconst PACKAGE =\n    \"https://gist.github.com/eqlion/3d9f42c142d054bd10da32f159b5eb82\";\n\nconst DESCRIPTION = {\n    en: \"Links to the examples of my configs: \",\n    ru: \"Ссылки на примеры моих конфигов: \",\n};\n\nconst ConfigExamples: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return (\n        <Container>\n            <Text>\n                {DESCRIPTION[language]} <Link url={PACKAGE}>package.json</Link>,{\" \"}\n                <Link url={ESLINT}>.eslintrc.js</Link>,{\" \"}\n                <Link url={PRETTIER}>.prettierrc.js</Link>.\n            </Text>\n        </Container>\n    );\n};\n\nexport default ConfigExamples;\n","import React, { FC, useContext } from \"react\";\n\nimport BulletListItem from \"../BulletListItem\";\nimport Container from \"../Container\";\nimport Text from \"../Text\";\n\nimport { LanguageContext } from \"../../util/language\";\n\nconst TITLE = {\n    en: \"Extra skills\",\n    ru: \"Дополнительные скиллы\",\n};\n\nconst SKILLS = {\n    ru: [\n        \"Русский: носитель\",\n        \"Английский: C1, формальная/неформальная речь, тех документация, читаю/пишу/говорю\",\n        \"LaTeX\",\n        \"Python: всякая математика (numpy, matplotlib), чуть-чуть Flask, совсем чуть-чуть Django\",\n    ],\n    en: [\n        \"Russian: native speaker\",\n        \"English: C1, formal/informal, tech docs, can speak/write/read\",\n        \"LaTeX\",\n        \"Python: maths applications (numpy, matplotlib), bits of Flask, miniscule bits of Django\",\n    ],\n};\n\nconst ExtraKnowledge: FC = () => {\n    const { language } = useContext(LanguageContext);\n\n    return (\n        <Container>\n            <Text>{TITLE[language]}</Text>\n            {SKILLS[language].map((skill, index) => (\n                <BulletListItem key={index}>\n                    <Text>{skill}</Text>\n                </BulletListItem>\n            ))}\n        </Container>\n    );\n};\n\nexport default ExtraKnowledge;\n","import React, { FC, useContext } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport useIsPhone from \"../../hooks/useIsPhone\";\nimport { COLORS } from \"../../util/colors\";\nimport { LanguageContext } from \"../../util/language\";\nimport BulletListItem from \"../BulletListItem\";\n\nimport Text from \"../Text\";\n\nconst TECH = [\n    \"React Native\",\n    \"TypeScript\",\n    \"JavaScript\",\n    \"Redux\",\n    \"Hooks\",\n    \"Bare Workflow\",\n    \"Managed Workflow\",\n    \"React Native for Web\",\n    \"Axios\",\n    \"bash\",\n    \"Fastlane\",\n    \"REST\",\n    \"cURL\",\n    \"Dayjs\",\n    \"Prettier\",\n    \"SVG\",\n    \"ESLint\",\n    \"Firebase\",\n    \"Formik\",\n    \"React Hook Form\",\n    \"Reanimated\",\n    \"React Navigation\",\n    \"Unit testing\",\n];\n\nconst TECH_TITLE = {\n    ru: \"Что я знаю:\",\n    en: \"I know:\",\n};\n\nconst INSTRUMENTS_TITLE = {\n    ru: \"Инструменты, которыми я пользуюсь:\",\n    en: \"The tools I use:\",\n};\n\nconst INSTRUMENTS = [\n    \"MacOS\",\n    \"Hackintosh\",\n    \"Ubuntu\",\n    \"VSCode\",\n    \"zsh\",\n    \"Xcode\",\n    \"Gradle\",\n    \"Expo\",\n    \"git\",\n    \"yarn/npm\",\n];\n\nconst OTHER = {\n    ru: \"И другие...\",\n    en: \"And other...\",\n};\n\nconst StackText: FC = () => {\n    const isPhone = useIsPhone();\n    const { language } = useContext(LanguageContext);\n\n    const containerStyle = {\n        flexDirection: isPhone ? (\"column\" as const) : (\"row\" as const),\n    };\n\n    const columnStyle = {\n        flex: 1,\n    };\n\n    return (\n        <View style={containerStyle}>\n            <View style={[styles.column, !isPhone && columnStyle]}>\n                <Text>{TECH_TITLE[language]}</Text>\n                <View style={styles.tagContainer}>\n                    {TECH.map((tech, index) => (\n                        <BulletListItem key={index}>\n                            <Text style={styles.tag}>{tech}</Text>\n                        </BulletListItem>\n                    ))}\n                    <BulletListItem>\n                        <Text style={styles.tag}>{OTHER[language]}</Text>\n                    </BulletListItem>\n                </View>\n            </View>\n            <View style={[styles.column, !isPhone && columnStyle]}>\n                <Text>{INSTRUMENTS_TITLE[language]}</Text>\n                <View style={styles.tagContainer}>\n                    {INSTRUMENTS.map((instrument, index) => (\n                        <BulletListItem key={index}>\n                            <Text style={styles.anotherTag}>{instrument}</Text>\n                        </BulletListItem>\n                    ))}\n                    <BulletListItem>\n                        <Text style={styles.anotherTag}>{OTHER[language]}</Text>\n                    </BulletListItem>\n                </View>\n            </View>\n        </View>\n    );\n};\n\nexport default StackText;\n\nconst styles = StyleSheet.create({\n    tagContainer: {\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n    },\n    tag: {\n        textDecorationLine: \"underline\",\n        textDecorationColor: COLORS.blue,\n        textAlign: \"center\",\n    },\n    anotherTag: {\n        textDecorationLine: \"underline\",\n        textDecorationColor: COLORS.orange,\n        textAlign: \"center\",\n    },\n    column: {\n        marginBottom: 16,\n    },\n});\n","import React, { FC, useContext } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { LanguageContext } from \"../../util/language\";\n\nimport Title from \"../Title\";\nimport ConfigExamples from \"./ConfigExamples\";\nimport ExtraKnowledge from \"./ExtraKnowledge\";\nimport StackText from \"./StackText\";\n\nconst TITLE = {\n    ru: \"Технологии && Инструменты\",\n    en: \"Stack && Tools\",\n};\n\nconst Stack: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return (\n        <View style={styles.container}>\n            <Title>{TITLE[language]}</Title>\n            <StackText />\n            <ExtraKnowledge />\n            <ConfigExamples />\n        </View>\n    );\n};\n\nexport default Stack;\n\nconst styles = StyleSheet.create({\n    container: {\n        marginBottom: 32,\n    },\n});\n","import React, { FC, useContext } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { Language, LanguageContext } from \"../../util/language\";\nimport Link from \"../Link\";\n\nconst getLinks = (language: Language) => {\n    switch (language) {\n        case \"en\":\n            return [\n                { url: \"https://t.me/eqlion\", text: \"Telegram\" },\n                { url: \"mailto:lapanicholas@gmail.com\", text: \"Email\" },\n                { url: \"https://github.com/eqlion/\", text: \"GitHub\" },\n                {\n                    url: \"https://docs.google.com/document/d/14qcVP1YD6FxWoJvDaR-wYFrcWw29k0doIaFmgudtprk/edit?usp=sharing\",\n                    text: \"Resume\",\n                },\n                {\n                    url: \"https://codestats.net/users/eqlion\",\n                    text: \"Code::Stats\",\n                },\n                {\n                    url: \"https://www.codewars.com/users/eqlion\",\n                    text: \"Code Wars\",\n                },\n            ];\n        case \"ru\":\n            return [\n                { url: \"https://t.me/eqlion\", text: \"Telegram\" },\n                { url: \"mailto:lapanicholas@gmail.com\", text: \"Email\" },\n                { url: \"https://github.com/eqlion/\", text: \"GitHub\" },\n                {\n                    url: \"https://docs.google.com/document/d/1GqL98NfqAYjFWcPT2Mi3eFsbwC69AOYGHOfukB3ie2I/edit?usp=sharing\",\n                    text: \"Резюме\",\n                },\n                {\n                    url: \"https://codestats.net/users/eqlion\",\n                    text: \"Code::Stats\",\n                },\n                {\n                    url: \"https://www.codewars.com/users/eqlion\",\n                    text: \"Code Wars\",\n                },\n            ];\n    }\n};\n\nconst ContactsText: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return (\n        <View style={styles.container}>\n            {getLinks(language).map(({ url, text }, index) => (\n                <Link url={url} key={index}>\n                    {text}\n                </Link>\n            ))}\n        </View>\n    );\n};\n\nexport default ContactsText;\n\nconst styles = StyleSheet.create({\n    container: {\n        flexBasis: 0.25,\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n    },\n});\n","import React, { FC, useContext } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { LanguageContext } from \"../../util/language\";\nimport Title from \"../Title\";\nimport ContactsText from \"./ContactsText\";\n\nconst TITLE = {\n    ru: \"Контакты && Ссылки\",\n    en: \"Contacts && Links\",\n};\n\nconst Contacts: FC = () => {\n    const { language } = useContext(LanguageContext);\n    return (\n        <View style={styles.container}>\n            <Title>{TITLE[language]}</Title>\n            <ContactsText />\n        </View>\n    );\n};\n\nexport default Contacts;\n\nconst styles = StyleSheet.create({\n    container: {\n        marginBottom: 32,\n    },\n});\n","import React, { useState } from \"react\";\nimport {\n    useFonts,\n    FiraCode_400Regular,\n    FiraCode_700Bold,\n    FiraCode_300Light,\n    FiraCode_500Medium,\n} from \"@expo-google-fonts/fira-code\";\nimport { Helmet } from \"react-helmet\";\n\nimport Screen from \"./src/components/Screen\";\nimport About from \"./src/components/About\";\nimport Education from \"./src/components/Education\";\nimport Experience from \"./src/components/Experience\";\nimport Stack from \"./src/components/Stack\";\n\nimport { Language, LanguageContext } from \"./src/util/language\";\nimport { COLORS } from \"./src/util/colors\";\nimport Contacts from \"./src/components/Contacts\";\n\nexport default function App() {\n    const [language, setLanguage] = useState<Language>(\"en\");\n    const changeLanguage = () =>\n        setLanguage(lang => (lang === \"ru\" ? \"en\" : \"ru\"));\n\n    useFonts({\n        FiraCode_300Light,\n        FiraCode_700Bold,\n        FiraCode_400Regular,\n        FiraCode_500Medium,\n    });\n\n    return (\n        <LanguageContext.Provider value={{ language, changeLanguage }}>\n            <Helmet>\n                <title>Nikolay Lapa</title>\n                <meta name=\"theme-color\" content={COLORS.background} />\n            </Helmet>\n            <Screen>\n                <About />\n                <Contacts />\n                <Experience />\n                <Stack />\n                <Education />\n            </Screen>\n        </LanguageContext.Provider>\n    );\n}\n","import { createContext } from \"react\";\n\nexport type Language = \"ru\" | \"en\";\n\nexport const LanguageContext = createContext<{\n    language: Language;\n    changeLanguage: () => void;\n}>({\n    language: \"en\",\n    changeLanguage: () => {},\n});\n","export const COLORS = {\n    background: \"#1c1e26\",\n    purple: \"#B877DB\",\n    gray: \"#b2b2b3\",\n    red: \"#F43E5C\",\n    peachy: \"#fac29a\",\n    green: \"#27D796\",\n    blue: \"#21BFC2\",\n    orange: \"#F77D26\",\n    white: \"#fff\",\n};\n","import { PixelRatio, useWindowDimensions } from \"react-native\";\nimport useIsPhone from \"./useIsPhone\";\n\nexport default (w: number) => {\n    const { width, height } = useWindowDimensions();\n    const isPhone = useIsPhone();\n    return PixelRatio.roundToNearestPixel(\n        (w * (isPhone ? width : height)) / (isPhone ? 414 : 769),\n    );\n};\n","import { useWindowDimensions } from \"react-native\";\n\nexport default () => {\n    const { width } = useWindowDimensions();\n    return width < 769;\n};\n"],"sourceRoot":""}